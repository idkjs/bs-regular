// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Cn = require("re-classnames/src/Cn.bs.js");
var Css = require("bs-css/src/Css.js");
var React = require("react");
var ReactDOMRe = require("reason-react/src/ReactDOMRe.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

var span1Percent = 100 / 12;

var row = Css.style(/* :: */[
      Css.display(/* flex */-1010954439),
      /* :: */[
        Css.flexWrap(/* wrap */-822134326),
        /* [] */0
      ]
    ]);

var cell = Css.style(/* :: */[
      Css.boxSizing(/* borderBox */9307263),
      /* [] */0
    ]);

var Styles = /* module */[
  /* span1Percent */span1Percent,
  /* row */row,
  /* cell */cell
];

var context = React.createContext(/* record */[
      /* span */12,
      /* gutter */8
    ]);

function makeProps(value, children, param) {
  return {
          value: value,
          children: children
        };
}

var make = context.Provider;

var ContextProvider = /* module */[
  /* makeProps */makeProps,
  /* make */make
];

function Grid$row(Props) {
  var className = Props.className;
  var span = Props.span;
  var children = Props.children;
  var match = React.useContext(context);
  var gutter = match[/* gutter */1];
  var style = gutter !== 0 ? ({
        marginLeft: String(-gutter | 0) + "px"
      }) : undefined;
  var tmp = {
    className: Cn.make(/* :: */[
          row,
          /* :: */[
            Cn.unpack(className),
            /* [] */0
          ]
        ])
  };
  if (style !== undefined) {
    tmp.style = Caml_option.valFromOption(style);
  }
  var body = React.createElement("div", tmp, children);
  if (span !== undefined) {
    return React.createElement(make, makeProps(/* record */[
                    /* span */span,
                    /* gutter */gutter
                  ], body, /* () */0));
  } else {
    return body;
  }
}

function Grid$cell(Props) {
  var span = Props.span;
  var className = Props.className;
  var children = Props.children;
  var match = React.useContext(context);
  var gutter = match[/* gutter */1];
  var style = {
    width: (span / match[/* span */0] * 100).toString() + "%"
  };
  var style$1 = gutter !== 0 ? ReactDOMRe.Style[/* combine */0](style, {
          paddingRight: String(gutter) + "px",
          paddingLeft: String(gutter) + "px"
        }) : style;
  return React.createElement(make, makeProps(/* record */[
                  /* span */span,
                  /* gutter */gutter
                ], React.createElement("div", {
                      className: Cn.make(/* :: */[
                            cell,
                            /* :: */[
                              Cn.unpack(className),
                              /* [] */0
                            ]
                          ]),
                      style: style$1
                    }, children), /* () */0));
}

var row$1 = Grid$row;

var cell$1 = Grid$cell;

exports.Styles = Styles;
exports.context = context;
exports.ContextProvider = ContextProvider;
exports.row = row$1;
exports.cell = cell$1;
/* row Not a pure module */
