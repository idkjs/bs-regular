// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Css = require("bs-css/src/Css.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Colors$ReactHooksTemplate = require("./theme/Colors.bs.js");
var ContextLayer$ReactHooksTemplate = require("./layer/ContextLayer.bs.js");

var layer = Css.style(/* :: */[
      Css.backgroundColor(/* `hex */[
            5194459,
            Colors$ReactHooksTemplate.primary200
          ]),
      /* :: */[
        Css.borderRadius(/* `px */[
              25096,
              2
            ]),
        /* :: */[
          Css.color(/* `hex */[
                5194459,
                Colors$ReactHooksTemplate.primary500
              ]),
          /* :: */[
            Css.fontSize(/* `px */[
                  25096,
                  14
                ]),
            /* :: */[
              Css.padding2(/* `px */[
                    25096,
                    6
                  ], /* `px */[
                    25096,
                    12
                  ]),
              /* [] */0
            ]
          ]
        ]
      ]
    ]);

var Styles = /* module */[/* layer */layer];

function Tooltip$layer(Props) {
  var text = Props.text;
  var contextRef = Props.contextRef;
  var position = Props.position;
  var tmp = {
    contextRef: contextRef,
    children: (function (param) {
        return React.createElement("div", {
                    className: layer
                  }, text);
      })
  };
  if (position !== undefined) {
    tmp.position = Caml_option.valFromOption(position);
  }
  return React.createElement(ContextLayer$ReactHooksTemplate.make, tmp);
}

function Tooltip(Props) {
  var text = Props.text;
  var position = Props.position;
  var children = Props.children;
  var contextRef = React.useRef(null);
  var match = React.useState((function () {
          return false;
        }));
  var setShowTooltip = match[1];
  var onMouseEnter = React.useCallback((function (param) {
          return Curry._1(setShowTooltip, (function (param) {
                        return true;
                      }));
        }), ([]));
  var onMouseLeave = React.useCallback((function (param) {
          return Curry._1(setShowTooltip, (function (param) {
                        return false;
                      }));
        }), ([]));
  var tmp;
  if (match[0]) {
    var tmp$1 = {
      text: text,
      contextRef: contextRef
    };
    if (position !== undefined) {
      tmp$1.position = Caml_option.valFromOption(position);
    }
    tmp = Tooltip$layer(tmp$1);
  } else {
    tmp = null;
  }
  return React.createElement(React.Fragment, undefined, Curry._3(children, contextRef, onMouseEnter, onMouseLeave), tmp);
}

function Tooltip$container(Props) {
  var text = Props.text;
  var position = Props.position;
  var children = Props.children;
  var className = Props.className;
  var tmp = {
    text: text,
    children: (function (contextRef, onMouseEnter, onMouseLeave) {
        var tmp = {
          ref: contextRef,
          onMouseEnter: onMouseEnter,
          onMouseLeave: onMouseLeave
        };
        if (className !== undefined) {
          tmp.className = Caml_option.valFromOption(className);
        }
        return React.createElement("div", tmp, children);
      })
  };
  if (position !== undefined) {
    tmp.position = Caml_option.valFromOption(position);
  }
  return Tooltip(tmp);
}

var layer$1 = Tooltip$layer;

var make = Tooltip;

var container = Tooltip$container;

exports.Styles = Styles;
exports.layer = layer$1;
exports.make = make;
exports.container = container;
/* layer Not a pure module */
