// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Css = require("bs-css/src/Css.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Colors$ReactHooksTemplate = require("../theme/Colors.bs.js");
var TextInput$ReactHooksTemplate = require("./TextInput.bs.js");
var ContextLayer$ReactHooksTemplate = require("../layer/ContextLayer.bs.js");

var layer = Css.style(/* :: */[
      Css.border(/* `px */[
            25096,
            1
          ], /* solid */12956715, /* `hex */[
            5194459,
            Colors$ReactHooksTemplate.primary450
          ]),
      /* [] */0
    ]);

var option = Css.style(/* :: */[
      Css.borderBottom(/* `px */[
            25096,
            1
          ], /* solid */12956715, /* `hex */[
            5194459,
            Colors$ReactHooksTemplate.primary450
          ]),
      /* :: */[
        Css.padding2(/* `px */[
              25096,
              8
            ], /* `px */[
              25096,
              16
            ]),
        /* [] */0
      ]
    ]);

var Styles = /* module */[
  /* layer */layer,
  /* option */option
];

function Select$SelectOption(Props) {
  var option$1 = Props.option;
  var onClick = Props.onClick;
  return React.createElement("div", {
              className: option,
              tabIndex: 0,
              onClick: onClick
            }, option$1[/* label */0]);
}

var SelectOption = /* module */[/* make */Select$SelectOption];

function Select$SelectOptions(Props) {
  var options = Props.options;
  var onSelect = Props.onSelect;
  var onMouseDown = Props.onMouseDown;
  var contextRef = Props.contextRef;
  return React.createElement(ContextLayer$ReactHooksTemplate.make, {
              contextRef: contextRef,
              position: /* Bottom */1,
              children: (function (param) {
                  return React.createElement("div", {
                              className: layer,
                              onMouseDown: onMouseDown
                            }, options.map((function (option, i) {
                                    return React.createElement(Select$SelectOption, {
                                                option: option,
                                                onClick: (function (param) {
                                                    return Curry._1(onSelect, option);
                                                  }),
                                                key: String(i)
                                              });
                                  })));
                })
            });
}

var SelectOptions = /* module */[/* make */Select$SelectOptions];

function Select(Props) {
  var getOptions = Props.getOptions;
  var inputRef = React.useRef(null);
  var match = React.useState((function () {
          return /* tuple */[
                  "",
                  undefined
                ];
        }));
  var setValue = match[1];
  var match$1 = match[0];
  var value = match$1[0];
  var match$2 = React.useState((function () {
          return false;
        }));
  var setFocused = match$2[1];
  var onChange = React.useCallback((function (e) {
          var value = e.currentTarget.value;
          return Curry._1(setValue, (function (param) {
                        return /* tuple */[
                                value,
                                undefined
                              ];
                      }));
        }), ([]));
  var blurTimeout = React.useRef(undefined);
  var onBlur = React.useCallback((function (param) {
          blurTimeout.current = Caml_option.some(setTimeout((function (param) {
                      return Curry._1(setFocused, (function (param) {
                                    return false;
                                  }));
                    }), 100));
          return /* () */0;
        }), ([]));
  var onFocus = function (param) {
    var match = blurTimeout.current;
    if (match !== undefined) {
      clearTimeout(Caml_option.valFromOption(match));
      blurTimeout.current = undefined;
    }
    return Curry._1(setFocused, (function (param) {
                  return true;
                }));
  };
  var onMouseDown = React.useCallback(onFocus, ([]));
  var onSelect = React.useCallback((function (option) {
          return Curry._1(setValue, (function (param) {
                        return /* tuple */[
                                option[/* label */0],
                                option
                              ];
                      }));
        }));
  var match$3 = match$1[1] === undefined && value.length !== 0 && match$2[0];
  var tmp;
  if (match$3) {
    var options = Curry._1(getOptions, value);
    var match$4 = options.length !== 0;
    tmp = match$4 ? React.createElement(Select$SelectOptions, {
            options: options,
            onSelect: onSelect,
            onMouseDown: onMouseDown,
            contextRef: inputRef
          }) : null;
  } else {
    tmp = null;
  }
  return React.createElement("div", {
              onFocus: React.useCallback(onFocus, ([])),
              onBlur: onBlur
            }, React.createElement(TextInput$ReactHooksTemplate.make, {
                  value: value,
                  onChange: onChange,
                  ref: inputRef
                }), tmp);
}

var make = Select;

exports.Styles = Styles;
exports.SelectOption = SelectOption;
exports.SelectOptions = SelectOptions;
exports.make = make;
/* layer Not a pure module */
