// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Cn = require("re-classnames/src/Cn.bs.js");
var Css = require("bs-css/src/Css.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Colors$ReactHooksTemplate = require("../theme/Colors.bs.js");
var TextInput$ReactHooksTemplate = require("./TextInput.bs.js");
var ContextLayer$ReactHooksTemplate = require("../layer/ContextLayer.bs.js");

var layer = Css.style(/* :: */[
      Css.border(/* `px */[
            25096,
            1
          ], /* solid */12956715, /* `hex */[
            5194459,
            Colors$ReactHooksTemplate.primary450
          ]),
      /* [] */0
    ]);

var option = Css.style(/* :: */[
      Css.backgroundColor(/* `hex */[
            5194459,
            Colors$ReactHooksTemplate.primary500
          ]),
      /* :: */[
        Css.borderBottom(/* `px */[
              25096,
              1
            ], /* solid */12956715, /* `hex */[
              5194459,
              Colors$ReactHooksTemplate.primary450
            ]),
        /* :: */[
          Css.padding2(/* `px */[
                25096,
                8
              ], /* `px */[
                25096,
                16
              ]),
          /* :: */[
            Css.lastChild(/* :: */[
                  Css.borderBottomStyle(/* none */-922086728),
                  /* [] */0
                ]),
            /* [] */0
          ]
        ]
      ]
    ]);

var optionSelected = Css.style(/* :: */[
      Css.backgroundColor(/* `hex */[
            5194459,
            Colors$ReactHooksTemplate.primary490
          ]),
      /* [] */0
    ]);

var Styles = /* module */[
  /* layer */layer,
  /* option */option,
  /* optionSelected */optionSelected
];

function Select$SelectOption(Props) {
  var option$1 = Props.option;
  var onClick = Props.onClick;
  var isSelected = Props.isSelected;
  return React.createElement("div", {
              className: Cn.make(/* :: */[
                    option,
                    /* :: */[
                      Cn.ifTrue(optionSelected, isSelected),
                      /* [] */0
                    ]
                  ]),
              tabIndex: 0,
              onClick: onClick
            }, option$1[/* label */0]);
}

var SelectOption = /* module */[/* make */Select$SelectOption];

function Select$SelectOptions(Props) {
  var options = Props.options;
  var selectedOption = Props.selectedOption;
  var onSelect = Props.onSelect;
  var onMouseDown = Props.onMouseDown;
  var contextRef = Props.contextRef;
  return React.createElement(ContextLayer$ReactHooksTemplate.make, {
              contextRef: contextRef,
              position: /* Bottom */1,
              children: (function (param) {
                  var inputElement = Belt_Option.getExn(Caml_option.nullable_to_opt(contextRef.current));
                  var style = {
                    width: String(inputElement.clientWidth) + "px"
                  };
                  return React.createElement("div", {
                              className: layer,
                              style: style,
                              onMouseDown: onMouseDown
                            }, options.map((function (option, i) {
                                    var isSelected = selectedOption !== undefined ? selectedOption === option : false;
                                    return React.createElement(Select$SelectOption, {
                                                option: option,
                                                onClick: (function (param) {
                                                    return Curry._1(onSelect, option);
                                                  }),
                                                isSelected: isSelected,
                                                key: String(i)
                                              });
                                  })));
                })
            });
}

var SelectOptions = /* module */[/* make */Select$SelectOptions];

function Select(Props) {
  var getOptions = Props.getOptions;
  var selectedOption = Props.selectedOption;
  var onChange = Props.onChange;
  var label = Props.label;
  var placeholder = Props.placeholder;
  var inputRef = React.useRef(null);
  var match = React.useState((function () {
          return "";
        }));
  var setTextValue = match[1];
  var textValue = match[0];
  var match$1 = React.useState((function () {
          return false;
        }));
  var setFocused = match$1[1];
  React.useEffect((function () {
          if (selectedOption !== undefined) {
            var selectedOption$1 = selectedOption;
            Curry._1(setTextValue, (function (param) {
                    return selectedOption$1[/* label */0];
                  }));
          } else {
            Curry._1(setTextValue, (function (param) {
                    return "";
                  }));
          }
          return undefined;
        }), /* array */[selectedOption]);
  var onInputChange = React.useCallback((function (e) {
          var value = e.currentTarget.value;
          return Curry._1(setTextValue, (function (param) {
                        return value;
                      }));
        }), ([]));
  var blurTimeout = React.useRef(undefined);
  var onBlur = React.useCallback((function (param) {
          blurTimeout.current = Caml_option.some(setTimeout((function (param) {
                      return Curry._1(setFocused, (function (param) {
                                    return false;
                                  }));
                    }), 100));
          return /* () */0;
        }), ([]));
  var onFocus = function (param) {
    var match = blurTimeout.current;
    if (match !== undefined) {
      clearTimeout(Caml_option.valFromOption(match));
      blurTimeout.current = undefined;
    }
    return Curry._1(setFocused, (function (param) {
                  return true;
                }));
  };
  var onMouseDown = React.useCallback(onFocus, ([]));
  var onSelect = function (option) {
    Curry._1(setFocused, (function (param) {
            return false;
          }));
    if (onChange !== undefined) {
      return Curry._1(onChange, option);
    } else {
      return /* () */0;
    }
  };
  var tmp = {
    value: textValue,
    onChange: onInputChange,
    ref: inputRef
  };
  if (label !== undefined) {
    tmp.label = Caml_option.valFromOption(label);
  }
  if (placeholder !== undefined) {
    tmp.placeholder = Caml_option.valFromOption(placeholder);
  }
  var match$2 = textValue.length !== 0 && match$1[0];
  var tmp$1;
  if (match$2) {
    var options = Curry._1(getOptions, textValue);
    var match$3 = options.length !== 0;
    tmp$1 = match$3 ? React.createElement(Select$SelectOptions, {
            options: options,
            selectedOption: selectedOption,
            onSelect: onSelect,
            onMouseDown: onMouseDown,
            contextRef: inputRef
          }) : null;
  } else {
    tmp$1 = null;
  }
  return React.createElement("div", {
              onFocus: React.useCallback(onFocus, ([])),
              onBlur: onBlur
            }, React.createElement(TextInput$ReactHooksTemplate.make, tmp), tmp$1);
}

var make = Select;

exports.Styles = Styles;
exports.SelectOption = SelectOption;
exports.SelectOptions = SelectOptions;
exports.make = make;
/* layer Not a pure module */
