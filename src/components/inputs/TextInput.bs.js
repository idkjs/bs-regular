// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Cn = require("re-classnames/src/Cn.bs.js");
var Css = require("bs-css/src/Css.js");
var React = require("react");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Colors$ReactHooksTemplate = require("../theme/Colors.bs.js");
var FormLabel$ReactHooksTemplate = require("./FormLabel.bs.js");

var input = Css.style(/* :: */[
      Css.border(/* `px */[
            25096,
            1
          ], /* solid */12956715, /* `hex */[
            5194459,
            Colors$ReactHooksTemplate.primary450
          ]),
      /* :: */[
        Css.borderRadius(/* `px */[
              25096,
              2
            ]),
        /* :: */[
          Css.boxSizing(/* borderBox */9307263),
          /* :: */[
            Css.color(/* `hex */[
                  5194459,
                  Colors$ReactHooksTemplate.primary200
                ]),
            /* :: */[
              Css.fontSize(/* `px */[
                    25096,
                    16
                  ]),
              /* :: */[
                Css.lineHeight(/* `px */[
                      25096,
                      24
                    ]),
                /* :: */[
                  Css.padding4(/* `px */[
                        25096,
                        8
                      ], /* `px */[
                        25096,
                        8
                      ], /* `px */[
                        25096,
                        8
                      ], /* `px */[
                        25096,
                        16
                      ]),
                  /* :: */[
                    Css.transition(100, undefined, undefined, "border-color"),
                    /* :: */[
                      Css.width(/* `percent */[
                            -119887163,
                            100
                          ]),
                      /* :: */[
                        Css.focus(/* :: */[
                              Css.borderColor(/* `hex */[
                                    5194459,
                                    Colors$ReactHooksTemplate.primary300
                                  ]),
                              /* :: */[
                                Css.outlineStyle(/* none */-922086728),
                                /* [] */0
                              ]
                            ]),
                        /* :: */[
                          Css.placeholder(/* :: */[
                                Css.color(/* `hex */[
                                      5194459,
                                      Colors$ReactHooksTemplate.primary400
                                    ]),
                                /* :: */[
                                  Css.fontWeight(/* `num */[
                                        5496390,
                                        300
                                      ]),
                                  /* [] */0
                                ]
                              ]),
                          /* [] */0
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ]);

var Styles = /* module */[/* input */input];

var nextUniqueId = /* record */[/* contents */1];

function getUniqueId(param) {
  var uniqueId = nextUniqueId[0];
  nextUniqueId[0] = uniqueId + 1 | 0;
  return String(uniqueId);
}

var make = React.forwardRef((function (Props, forwardedRef) {
        var className = Props.className;
        var label = Props.label;
        var placeholder = Props.placeholder;
        var value = Props.value;
        var onChange = Props.onChange;
        var onFocus = Props.onFocus;
        var onBlur = Props.onBlur;
        var match = React.useState((function () {
                return getUniqueId(/* () */0);
              }));
        var inputId = match[0];
        var tmp = {
          className: Cn.make(/* :: */[
                input,
                /* :: */[
                  Cn.unpack(className),
                  /* [] */0
                ]
              ]),
          id: inputId,
          type: "text"
        };
        var tmp$1 = Belt_Option.map((forwardedRef == null) ? undefined : Caml_option.some(forwardedRef), (function (prim) {
                return prim;
              }));
        if (tmp$1 !== undefined) {
          tmp.ref = Caml_option.valFromOption(tmp$1);
        }
        if (placeholder !== undefined) {
          tmp.placeholder = Caml_option.valFromOption(placeholder);
        }
        if (value !== undefined) {
          tmp.value = Caml_option.valFromOption(value);
        }
        if (onFocus !== undefined) {
          tmp.onFocus = Caml_option.valFromOption(onFocus);
        }
        if (onBlur !== undefined) {
          tmp.onBlur = Caml_option.valFromOption(onBlur);
        }
        if (onChange !== undefined) {
          tmp.onChange = Caml_option.valFromOption(onChange);
        }
        var input$1 = React.createElement("input", tmp);
        if (label !== undefined) {
          return React.createElement(React.Fragment, undefined, React.createElement(FormLabel$ReactHooksTemplate.make, {
                          children: label,
                          htmlFor: inputId
                        }), input$1);
        } else {
          return input$1;
        }
      }));

var $$static = React.forwardRef((function (Props, forwardedRef) {
        var children = Props.children;
        var className = Props.className;
        var label = Props.label;
        var tabIndex = Props.tabIndex;
        var onClick = Props.onClick;
        var tmp = {
          className: Cn.make(/* :: */[
                input,
                /* :: */[
                  Cn.unpack(className),
                  /* [] */0
                ]
              ])
        };
        var tmp$1 = Belt_Option.map((forwardedRef == null) ? undefined : Caml_option.some(forwardedRef), (function (prim) {
                return prim;
              }));
        if (tmp$1 !== undefined) {
          tmp.ref = Caml_option.valFromOption(tmp$1);
        }
        if (tabIndex !== undefined) {
          tmp.tabIndex = Caml_option.valFromOption(tabIndex);
        }
        if (onClick !== undefined) {
          tmp.onClick = Caml_option.valFromOption(onClick);
        }
        var input$1 = React.createElement("div", tmp, children);
        if (label !== undefined) {
          return React.createElement(React.Fragment, undefined, React.createElement(FormLabel$ReactHooksTemplate.make, {
                          children: label
                        }), input$1);
        } else {
          return input$1;
        }
      }));

exports.Styles = Styles;
exports.nextUniqueId = nextUniqueId;
exports.getUniqueId = getUniqueId;
exports.make = make;
exports.$$static = $$static;
/* input Not a pure module */
