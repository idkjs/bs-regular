// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Css = require("bs-css/src/Css.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Layer$ReactHooksTemplate = require("./Layer.bs.js");

var layer = Css.style(/* :: */[
      Css.position(/* absolute */-1013592457),
      /* [] */0
    ]);

var Styles = /* module */[/* layer */layer];

function getAnchor(contextRect, _layerRect, position) {
  switch (position) {
    case 0 : 
        return /* BottomLeft */Block.__(0, [
                  contextRect.top,
                  contextRect.left
                ]);
    case 1 : 
        return /* TopLeft */Block.__(1, [
                  contextRect.bottom,
                  contextRect.left
                ]);
    case 2 : 
        return /* TopRight */Block.__(2, [
                  contextRect.top,
                  contextRect.left
                ]);
    case 3 : 
        return /* TopLeft */Block.__(1, [
                  contextRect.top,
                  contextRect.right
                ]);
    
  }
}

function ContextLayer(Props) {
  var context = Props.context;
  var match = Props.position;
  var position = match !== undefined ? match : /* Top */0;
  var children = Props.children;
  var match$1 = React.useState((function () {
          return undefined;
        }));
  var setAnchor = match$1[1];
  var anchor = match$1[0];
  var divRef = React.useRef(null);
  React.useLayoutEffect((function () {
          var contextElement = Belt_Option.getExn(Caml_option.nullable_to_opt(context.current));
          var contextRect = contextElement.getBoundingClientRect();
          var layerDiv = Belt_Option.getExn(Caml_option.nullable_to_opt(divRef.current));
          var layerRect = layerDiv.getBoundingClientRect();
          Curry._1(setAnchor, (function (param) {
                  return getAnchor(contextRect, layerRect, position);
                }));
          return undefined;
        }), ([]));
  var outerStyle = Belt_Option.map(anchor, (function (param) {
          return {
                  left: param[1].toString() + "px",
                  top: param[0].toString() + "px"
                };
        }));
  var innerStyle = Belt_Option.map(anchor, (function (param) {
          switch (param.tag | 0) {
            case 0 : 
                return {
                        bottom: "0",
                        left: "0"
                      };
            case 1 : 
                return {
                        left: "0",
                        top: "0"
                      };
            case 2 : 
                return {
                        right: "0",
                        top: "0"
                      };
            
          }
        }));
  var tmp = {
    ref: divRef,
    className: layer
  };
  if (outerStyle !== undefined) {
    tmp.style = Caml_option.valFromOption(outerStyle);
  }
  var tmp$1 = {
    className: layer
  };
  if (innerStyle !== undefined) {
    tmp$1.style = Caml_option.valFromOption(innerStyle);
  }
  return React.createElement(Layer$ReactHooksTemplate.make, {
              children: React.createElement("div", tmp, React.createElement("div", tmp$1, children))
            });
}

var make = ContextLayer;

exports.Styles = Styles;
exports.getAnchor = getAnchor;
exports.make = make;
/* layer Not a pure module */
